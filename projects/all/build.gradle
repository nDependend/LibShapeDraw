import org.apache.tools.ant.filters.ReplaceTokens

//apply from: 'metadata.gradle'

ext {
	mcpDir = new File(System.properties['user.home'], 'Desktop/minecraft/mcp/mcp908/')
}

allprojects  {
    apply plugin: 'maven'

    group = project.property('libshapedraw.name').toLowerCase()
    version = project.property('libshapedraw.version')
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    ext.sharedManifest = manifest {
        attributes('Built-By': 'Gradle', 'Implementation-Title': project.property('libshapedraw.name'), 'Implementation-Vendor': project.property('libshapedraw.authors'), 'Implementation-Version': version)
    }
    ext.coreModManifest = manifest {
        attributes('FMLCorePlugin': 'libshapedraw.internal.bootstrap.FMLCoreMod', 'FMLCorePluginContainsFMLMod': 'true')
    }

    repositories {
        maven {
            url "http://repo.maven.apache.org/maven2"
        }
        maven {
            name = "mojang"
            url = "https://libraries.minecraft.net/"
        }
    }


    dependencies {
        compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version:'2.9.+'
        compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version:'2.9.+'
        testCompile group: 'junit', name: 'junit', version:'4.+'
        testRuntime group: 'com.google.code.gson', name: 'gson', version: '2.2.+'
        testRuntime group: 'org.apache.logging.log4j', name:'log4j-api', version:"2.0-beta9"
        testRuntime group: 'org.apache.logging.log4j', name:'log4j-core', version:"2.0-beta9"
        compile group: 'net.minecraft', name: 'launchwrapper', version:'1.9'
        compile files('../../lib/BON.jar')
        compile files(new File(mcpDir, "bin/minecraft"))
        compile group: 'com.google.guava', name: 'guava', version:'15.+'
        testRuntime group: 'io.netty', name: 'netty-all', version: '4.0.+'
    }

    processResources {
        doFirst {
            filter ReplaceTokens, tokens: [
                "libshapedraw.name": project.property("libshapedraw.name"),
                "libshapedraw.url.main": project.property("libshapedraw.url.main"),
                "libshapedraw.url.short": project.property("libshapedraw.url.short"),
                "libshapedraw.url.source": project.property("libshapedraw.url.source"),
                "libshapedraw.url.update": project.property("libshapedraw.url.update"),
                "libshapedraw.updatecheck": project.property("libshapedraw.updatecheck"),
                "libshapedraw.authors": project.property("libshapedraw.authors"),
                "libshapedraw.blurb": project.property("libshapedraw.blurb"),
                "libshapedraw.blurb.demos": project.property("libshapedraw.blurb.demos"),
                "libshapedraw.version": project.property("libshapedraw.version"),
                "libshapedraw.revision": project.property("libshapedraw.revision"),
                "minecraft.version": project.property("minecraft.version"),
                "liteloader.version": project.property("liteloader.version")
                ]
        }
    }

    ext.platforms = ['windows', 'linux', 'osx']
    platforms.each { platform ->
        task "${platform}Natives" {
            def outputDir = "$buildDir/natives/$platform"
            inputs.files(configurations.compile)
            outputs.dir(outputDir)
            doLast {
                copy {
                    def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
                        .findAll { it.classifier == "natives-$platform" }
                    artifacts.each { 
                        from zipTree(it.file)
                    }            
                    into outputDir
                }
            }
        }
    }

    task natives {
        description "Copies native libraries to an appropriate directory."
        it.dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
    }

    // Unfortunatly the Gradle app plug-in does not allow me to pass in -D options.
    // LWJGL
    test { 
        // System.setProperty('java.library.path' , './build/natives/linux' )
        // systemProperties = [ 'java.library.path' : './build/natives/linux' ]
        jvmArgs "-Djava.library.path=./build/natives/linux"
        it.dependsOn natives
    }

    task reobfuscate(dependsOn: jar) {
        // we modify jar properties at runtime per project, so we can't declare outputs at configuration-time
        outputs.upToDateWhen{ !jar.state.getDidWork() }
        doLast {
            def dest = new File(jar.destinationDir, "${jar.baseName}-${version}.${jar.extension}")
            javaexec {
                main = 'immibis.bon.cui.MCPRemap'
                classpath = project.files("../../lib/BON.jar")
                args = ['-mcp', project.mcpDir.absolutePath,
                     '-from', 'MCP',
                     '-to',   'OBF',
                     '-side', 'UNIVERSAL',
                     '-ref',  new File(project.mcpDir, 'bin/minecraft').absolutePath,
                     '-in', jar.archivePath,
                     '-out', dest ]
            }

            // Copy the manifest file
            if (dest.exists() && dest.canRead()) {
                ant.zip(destfile: dest, update: true) {
                    zipfileset(src: jar.archivePath) {
                        include(name: 'META-INF/*')
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs = ["-Xlint:all"]
    }
}

//public class LiteMod extends Jar {
//  String extension = 'litemod'
//}
[':liteloader', ':forge'].each { projectName ->
    project(projectName) {
        configurations {
            bootstrap
        }

        dependencies {
            compile project(path: ':LibShapeDraw', configuration: 'common')
            bootstrap project(path: ':LibShapeDraw', configuration: 'common')
        }

        jar {
            from {
                configurations.bootstrap.collect {
                    it.isDirectory() ? it : zipTree(it)
                }
            }
            manifest {
                from sharedManifest
            }

            baseName = project.property('libshapedraw.name')
            classifier = 'dev'
        }

        javadoc {
            enabled = false
        }

        tasks.build.dependsOn(reobfuscate)
    }
}

project(':liteloader') {
    jar {
        extension = 'litemod'
    }
}

project(':forge') {
    def filteredSourceDir = file("${buildDir}/filtered")

    sourceSets {
    // This source set will contain all sources that we filter
        filtered {
            java {
                srcDirs = [filteredSourceDir]
            }
        }
    }

    // tell the compileJava task to compile the filtered source
    compileJava.source = sourceSets.filtered.java

    // copy the main sources and filter any '$version' occurences.
    task processSources(type: Copy) {
        from sourceSets.main.java
        into filteredSourceDir
        doFirst {
            filter ReplaceTokens, tokens: [
                "libshapedraw.name": project.property("libshapedraw.name"),
                "libshapedraw.version": project.property("libshapedraw.version"),
            ]
        }
    }

    compileJava.dependsOn processSources

    // ---

    dependencies {
        compile files('../../lib/forgemcpbin.jar')
    }

    jar {
        manifest {
            from coreModManifest
        }
        extension = 'jar'
    }
}

project(':demos') {
    dependencies {
        compile project(path: ':LibShapeDraw', configuration: 'common')
    }

    jar {
        baseName = project.property('libshapedraw.name') + "Demos"

        manifest {
            attributes('Implementation-Title': baseName)
            from(sharedManifest) {
                eachEntry { details ->
                    // preserve already defined entries
                    if (details.baseValue != details.mergeValue && details.key == 'Implementation-Title') {
                        details.value = baseValue
                    }
                }
            }
        }

        extension = 'litemod'
        classifier = 'dev'
    }

    tasks.build.dependsOn(reobfuscate)
}

project(':LibShapeDraw') {
    configurations {
        common
    }

    // deobfuscated/dev jar sans bootstrappers
    task libraryJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'lib'
    }

    // deobfuscated/dev jar with bootstrappers
    def bootstrapProjects = [':liteloader', ':forge']
    jar {
        from files(bootstrapProjects.collect {
            project(it).sourceSets.main.output
        })

        manifest {
            from sharedManifest, coreModManifest
        }

        baseName = project.property('libshapedraw.name')
        classifier = 'dev'
    }

    jar.dependsOn bootstrapProjects.collect {
        it + ':classes'
    }

    javadoc {
        source project(':liteloader').sourceSets.main.allJava
        source project(':forge').sourceSets.filtered.allJava
        options.overview = new File("${project(':LibShapeDraw').projectDir}/src/main/javadoc/overview.html")
    }

    artifacts {
        common libraryJar
    }

    tasks.build.dependsOn(reobfuscate)
}
